policy_module(openstackguestagent, 1.0.0)

#######################################
# 
# Declarations
#

type openstack_guest_agent_t;
type openstack_guest_agent_exec_t;
init_daemon_domain(openstack_guest_agent_t, openstack_guest_agent_exec_t)

type openstack_guest_agent_etc_t;
files_config_file(openstack_guest_agent_etc_t)

type openstack_guest_agent_initrc_exec_t;
init_script_file(openstack_guest_agent_initrc_exec_t)

type openstack_guest_agent_var_run_t;
files_pid_file(openstack_guest_agent_var_run_t)

type openstack_guest_agent_var_cache_t;
files_type(openstack_guest_agent_var_cache_t)

#######################################
#
# Local Policy
#

allow openstack_guest_agent_t self:process { signal setrlimit };
allow openstack_guest_agent_t self:capability { setuid setgid net_admin };
allow openstack_guest_agent_t self:fifo_file { read getattr write ioctl };
allow openstack_guest_agent_t self:netlink_route_socket { setopt nlmsg_write read bind create nlmsg_read write getattr };

# Override the default context for fs creation ... probably not necessary.
allow openstack_guest_agent_t self:process setfscreate;

allow openstack_guest_agent_t openstack_guest_agent_etc_t:file { read getattr open };
allow openstack_guest_agent_t openstack_guest_agent_etc_t:dir search;

manage_dirs_pattern(openstack_guest_agent_t, openstack_guest_agent_var_cache_t, openstack_guest_agent_var_cache_t)
manage_files_pattern(openstack_guest_agent_t, openstack_guest_agent_var_cache_t, openstack_guest_agent_var_cache_t)

manage_files_pattern(openstack_guest_agent_t, openstack_guest_agent_var_run_t, openstack_guest_agent_var_run_t)
files_pid_filetrans(openstack_guest_agent_t, openstack_guest_agent_var_run_t, file)

files_search_var(openstack_guest_agent_t)

files_search_etc(openstack_guest_agent_t)
files_manage_etc_files(openstack_guest_agent_t)
files_manage_etc_dirs(openstack_guest_agent_t)

allow openstack_guest_agent_t etc_runtime_t:dir search;
files_read_etc_runtime_files(openstack_guest_agent_t)

files_read_usr_files(openstack_guest_agent_t)

files_manage_generic_tmp_files(openstack_guest_agent_t)

usermanage_read_crack_db(openstack_guest_agent_t)
auth_manage_shadow(openstack_guest_agent_t)

sysnet_manage_config(openstack_guest_agent_t)

corecmd_exec_bin(openstack_guest_agent_t)
corecmd_exec_shell(openstack_guest_agent_t)
hostname_exec(openstack_guest_agent_t)
sysnet_run_ifconfig(openstack_guest_agent_t)
nscd_exec(openstack_guest_agent_t)
auth_domtrans_chk_passwd(openstack_guest_agent_t)

kernel_read_system_state(openstack_guest_agent_t)
dev_read_sysfs(openstack_guest_agent_t)
dev_search_sysfs(openstack_guest_agent_t)

logging_send_syslog_msg(openstack_guest_agent_t)

# Not sure why these are required ...
kernel_read_unlabeled_state(openstack_guest_agent_t)
miscfiles_read_localization(openstack_guest_agent_t)

require {
  type security_t;
};

allow openstack_guest_agent_t security_t:dir read;
allow openstack_guest_agent_t security_t:file write;
allow openstack_guest_agent_t security_t:security compute_av;

# File Injection
bool openstack_guest_agent_inject_anywhere false;

tunable_policy(`openstack_guest_agent_inject_anywhere', `
  files_manage_all_files(openstack_guest_agent_t)
')

# Xen Interactions
optional_policy(`
  require {
    type xenfs_t;
    type xenstored_var_run_t;
  };

  fs_search_xenfs(openstack_guest_agent_t)
  allow openstack_guest_agent_t xenfs_t:dir { getattr };
  allow openstack_guest_agent_t xenfs_t:file { read write open getattr };
  allow openstack_guest_agent_t xenstored_var_run_t:dir search;
')

